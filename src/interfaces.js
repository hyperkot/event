/// <reference path="../typings/index.d.ts"/>
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["interfaces.ts"],"names":[],"mappings":"AAAA,6CAA6C","sourcesContent":["/// <reference path=\"../typings/index.d.ts\"/>\n\n/**\n * A function, callback, which is called, when subject event occurs.\n * It is called with a single argument - it is the same argument that was passed to the\n * \"trigger()\" method call, which is the only way to make event \"happen\".\n */\nexport interface EventHandler<T> {\n    (eventArg: T): void\n}\n\n/**\n * The full configuration for a specific event-handler. It controls the way\n * the relevant event-handler function is invoked.\n */\nexport interface EventHandlerOptions<T> {\n    /** The actual handler function to be called when the event occurs. */\n    handler: EventHandler<T>;\n    \n    /** If this flag is set - the event handler will remove itself from the event\n    after first invocation. */\n    once?: boolean;\n    \n    /** If this field is specified, then handler will be called with that context. */\n    context?: Object;\n    \n    /** The name of the event handler. Used for identification. You may create two\n     * listeners, with same handler function, but different names - so that later,\n     * you can 'off'/'unlisten' a specific listener by name, while unlistening by\n     * handler function would've removed both listener.\n     */\n    name?: string;\n    \n    /**\n     * Always used in combination with following parameter 'matchValue' and is a\n     * flag, which means(if set) that only event invocations with argument equal\n     * to that predefined 'matchValue' should be passed to the handler function.\n     * Basically this is a shorthand for the code like this:\n     *\n     *  event.listen((arg) => {\n     *      if(arg === matchValue)) event.callHandler();\n     * });        \n     * \n     * @type {[type]}\n     */\n    onlyMatching?: boolean;\n    \n    /**\n     * The value, to be matched if the 'onlyMatching' flag is set.\n     * @type {[type]}\n     */\n    matchValue?: T;\n}\n\n/**\n * This is the object which represents an existing handler internally in Event object.\n */\nexport interface EventHandlerDescriptor<T> extends EventHandlerOptions<T> {\n    id: number;\n}\n\n/**\n * The interface for the 'event.trigger()' method\n */\nexport interface EventTriggerer<T> {\n    (arg: T): void\n}\n\n/**\n * The interface for the 'event.listen()' method\n */\nexport interface EventListener<T> {\n    (handler: EventHandler<T>, context?: Object): void;\n    (name: string, h: EventHandler<T>, context?: Object): void;\n}\n\n/**\n * The interface for the 'event.unlisten()' method\n */\nexport interface EventUnlistener<T> {\n    (handler: EventHandler<T>, context?: Object): void;\n    (context: Object): void;\n    (name: string): void;\n    (): void;\n}\n\n/**\n * The interface for the 'event.once()' method\n */\nexport interface EventOncer<T> {\n    (handler: EventHandler<T>, context?: Object): void\n}\n\n/**\n * The interface for the 'event.match()' method\n */\nexport interface EventMatchListener<T> {\n    (value: T, handler: EventHandler<T>, context?: Object): void;\n    (value: T, name: string, h: EventHandler<T>, context?: Object): void;\n}\n\n/**\n * The interface for the 'event.matchOnce()' method\n */\nexport interface EventMatchOncer<T> {\n    (value: T, handler: EventHandler<T>, context?: Object): void;\n}\n\n/**\n * The interface for the 'event.when()' method\n */\nexport interface EventWhener<T> {\n    (): Promise<T>;\n}\n\n/**\n * The interface for the 'event.then()' method\n */\nexport interface EventThener<T> {\n    (onOk: Function, onFail: Function): Promise<T>;\n}\n\n/**\n * The interface for the 'event.catch()' method\n */\nexport interface EventCatcher<T> {\n    (onFail: (err:any) => T|any): Promise<T>;\n}\n\n/**\n * In context of this library, an 'event-emitter' means the same as 'event/event-object',\n * except there is not triggering methods in event-emitter. Event emitter is\n * definition of the interface of the event which should be accessible by external\n * entity. The trigger method is considered to be internal to the object, which this\n * event belongs to. So only the object itself should be able to trigger its own events,\n * not any external object.\n * \n * The common pattern i use is this:\n * - define a private/protected event property, explicitly named 'eventBlabla'\n * - define a public getter, returning EventEmitter, and named without the event prefix:\n * \n *      class SomeAwesomeClass {\n *          private eventBlabla: Event<any> = new Event<any>();\n *          public get blabla(): EventEmitter<any> { return this.eventBlabla; }\n *          public doSomething() {\n *              eventBlabla.trigger('yet another blabla'); // blabla happened!\n *          };\n *      } \n * \n *      let x = new SomeAwesomeClass();\n *      x.blabla.listen(() => console.log('blablabla!'));\n * \n */\nexport interface EventEmitter<T> extends Thenable<T> {\n    /**\n     * Add event handler to this event. Optionally pass a context in second argument - \n     * then when triggered this  event will call the 'h' handler with the given context.\n     */\n    listen(h: EventHandler<T>, context?: Object): number;\n    listen(name: string, h: EventHandler<T>, context?: Object): number;\n    /**\n     * Add event handler to this event, which will be called only when event is triggered\n     * with value, which is exactly(===) the same as the one you pass to the match \n     * method as first argument\n     */\n    match(value: T, h: EventHandler<T>, context?: Object): number;\n    match(value: T, name: string, h: EventHandler<T>, context?: Object): number;\n\n    /**\n     * Adds an event handler.\n     * Combines the 'once' and the 'match' behaviours.\n     */\n    matchOnce(value: T, handler: EventHandler<T>, context?: Object): number;\n\n    /**\n     * An alias for the listen method.\n     */\n    on(h: EventHandler<T>, context?: Object): number;\n    on(name: string, h: EventHandler<T>, context?: Object): number;\n\n    /**\n     * An event actually fully implements a promise interface. That promise interface\n     * refers to the first time the event is triggered. So when you trigger any event\n     * for the first time - as a promise it is resolved with the value you pass to\n     * trigger method call.\n     * \n     * The after method is a shortcut-helper - it just uses given handler on promise\n     * as both a 'then' and a 'catch' handler.\n     * \n     */\n    after(onResolve: (result: T|any)=>any): Thenable<T>;\n\n    /**\n     * Removes an event handler or several. Which handlers get removed depends on the arguments.\n     */\n    unlisten(handler: EventHandler<T>, context?: Object): void;\n    unlisten(context: Object): void;\n    unlisten(name: string): void;\n    unlisten(id: number): void;\n    unlisten(): void;\n\n    /**\n     * An alias for unlisten\n     */\n    off(handler: EventHandler<T>, context?: Object): void;\n    off(context: Object): void;\n    off(name: string): void;\n    off(id: number): void;\n    off(): void;\n\n    pipe(other: EventEmitter<T>): void;\n\n    once(h: EventHandler<T>, context?: Object): number;\n\n    when(): Promise<T>;\n}\n\nexport interface EventTrait<T> extends EventEmitter<T> {\n    trigger(arg: T): void;\n\n    getTriggerer(): EventTriggerer<T>;\n}\n\nexport interface EventTraitTrigger<T> extends EventTrait<T> {\n    (arg: T): void;\n}\n\nexport interface EventTraitedMethod<MethodT extends ()=>void, EventArgsT> extends EventTrait<EventArgsT> {\n}\n\nexport interface Thenable<T> {\n    then(onResolve: (result: T)=>any, onReject?: (error: Error|any)=>any): Thenable<T>;\n    catch(onReject: (error: Error|any)=>any): Thenable<T>;\n}"]}