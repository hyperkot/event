/// <reference path="../typings/index.d.ts"/>
const _ = require("lodash");
/**
 * Represents an event and proviedes various way to observe the event both
 * externally and internally. Internally provides also a way to trigger the event.
 */
class Event {
    constructor() {
        this.listeners = [];
        this.isBeingTriggered = false;
        /*
        This whole thing with 'delegates' was desiged first of all to provide
        a way to make mixin feature, which wouldn't create new closures all the time,
        and so that the user never has to use closures or 'bind' to use any of
        event object methods as callbacks passed somewhere, etc...
    
        This 'delegate' code definitely could be shorter, and it is not the best way
        to do it. Here is a good place to mention that this lib,
        is created not for production sites, but for my own academical purposes,
        so first of all it should be convinient for me, not taking into account other
        people. I totally don't care about performance in this lib. I have no goal to
        make the most fast or error-free thing right now. The goal of this library is
        to implement the 'event-object' approach to events concept, and experiment
        with various possible API features, to find out which of them are usefull and
        which are not really needed, or make API too complex. After finding out what i believe
        is the most simple, laconic and clear API this lib could have - i'll cover it fully with
        tests, and only after that will i even consider taking any performance issues into account.
        */
        this.triggerDelegate = null;
        this.listenDelegate = null;
        this.matchDelegate = null;
        this.matchOnceDelegate = null;
        this.unlistenDelegate = null;
        this.onceDelegate = null;
        this.whenDelegate = null;
        this.thenDelegate = null;
        this.catchDelegate = null;
        this.promise = null;
        this.isFirstTriggerDone = false;
        this.idCounter = 0;
        this.triggerDelegate = (eventArg) => this.trigger(eventArg);
        this.listenDelegate = (...args) => {
            return this.listen.apply(this, args);
        };
        this.matchDelegate = (...args) => {
            return this.match.apply(this, args);
        };
        this.matchOnceDelegate = (...args) => {
            return this.matchOnce.apply(this, args);
        };
        this.unlistenDelegate = (...args) => {
            return this.unlisten.apply(this, args);
        };
        this.onceDelegate = (handler, context = null) => {
            return this.once(handler, context);
        };
        this.whenDelegate = () => {
            return this.when();
        };
        this.thenDelegate = (onOk, onFail) => {
            return this.then(onOk, onFail);
        };
        this.catchDelegate = (onFail) => {
            return this.catch(onFail);
        };
        this.promise = new Promise((resolve) => { this.resolve = resolve; });
    }
    /**
     * Mix this events methods into the target object.
     * This is a way to add the event functionality to some existing object,
     * without messing with it's inheritance chain.
     */
    mixin(target) {
        target.trigger = this.getTriggerer();
        target.getTriggerer = () => {
            return this.getTriggerer();
        };
        target.listen = this.getListener();
        target.match = this.getMatchListener();
        target.matchOnce = this.getMatchOncer();
        target.unlisten = this.getUnlistener();
        target.once = this.getOncer();
        target.when = this.getWhener();
        target.then = this.getThener();
        target.catch = this.getCatcher();
        return target;
    }
    /** Returns a context-independent callback that triggers the event with given argument */
    getTriggerer() { return this.triggerDelegate; }
    getListener() { return this.listenDelegate; }
    getMatchListener() { return this.matchDelegate; }
    getMatchOncer() { return this.matchOnceDelegate; }
    getUnlistener() { return this.unlistenDelegate; }
    getOncer() { return this.onceDelegate; }
    getWhener() { return this.whenDelegate; }
    getThener() { return this.thenDelegate; }
    getCatcher() { return this.catchDelegate; }
    /**
     * Triggers the event with given argument, invoking all of its handlers, and if
     * the event is triggered for the first time - removing the once event handlers and
     * saving given argument inetrnally as first trigger argument.
     *
     * The argument is optional, since event can be of void type (`x= new Event<void>()`),
     * but if the event is not of a void type - you should allways pass an argument to
     * the trigger method.
     */
    trigger(eventArg) {
        if (this.isBeingTriggered) {
            throw new Error(`Event triggered during trigger handling - suspecting recursive event.`);
        }
        this.isBeingTriggered = true;
        if (!this.isFirstTriggerDone) {
            this.isFirstTriggerDone = true;
            this.resolve(eventArg);
        }
        this.listeners.slice().forEach((listener) => {
            let doCall = true;
            if (listener.onlyMatching) {
                doCall = listener.matchValue === eventArg;
            }
            if (doCall) {
                if (listener.context) {
                    listener.handler.call(listener.context, eventArg);
                }
                else {
                    listener.handler.call(null, eventArg);
                }
                if (listener.once) {
                    this.removeListener(listener);
                }
            }
        });
        this.isBeingTriggered = false;
    }
    listen(...args) {
        let id;
        if (typeof args[0] === 'string') {
            let [name, handler, context] = args;
            id = this.addListener({ name, handler, context });
        }
        else {
            let [handler, context] = args;
            id = this.addListener({ handler, context });
        }
        return id;
    }
    ;
    match(value, ...args) {
        let id;
        if (typeof args[0] === 'string') {
            let [name, handler, context] = args;
            id = this.addListener({ name, handler, context, onlyMatching: true, matchValue: value });
        }
        else {
            let [handler, context] = args;
            id = this.addListener({ handler, context, onlyMatching: true, matchValue: value });
        }
        return id;
    }
    ;
    /**
     * Combines 'match' and 'once' features.
     */
    matchOnce(value, handler, context = null) {
        return this.addListener({ context, handler, once: true, onlyMatching: true, matchValue: value });
    }
    once(handler, context = null) {
        return this.addListener({ context, handler, once: true });
    }
    unlisten(...args) {
        let name = null, context, handler, idToRemove = null;
        switch (args.length) {
            case 0:
                this.listeners = [];
                return;
            case 1:
                if (typeof args[0] === 'string') {
                    name = args[0];
                    handler = args[1];
                    context = args[2];
                }
                else if (typeof args[0] === 'number') {
                    idToRemove = args[0];
                }
                else {
                    handler = args[0];
                    context = args[1];
                }
                ;
                break;
            case 2:
                handler = args[0];
                context = args[1];
                break;
        }
        this.listeners = _.filter(this.listeners, (hConf) => {
            let differentHandler = hConf.handler !== handler;
            let noContextGiven = context === null;
            let confHasNoContext = !!hConf.context;
            let differentContext = hConf.context !== context;
            let sameName = name && hConf.name && (name === hConf.name);
            let dontRemove;
            if (idToRemove !== null) {
                dontRemove = idToRemove !== hConf.id;
            }
            else {
                if (name) {
                    dontRemove = !sameName;
                }
                else {
                    if (differentHandler) {
                        dontRemove = true;
                    }
                    else {
                        dontRemove = noContextGiven ? (!confHasNoContext) : (confHasNoContext || differentContext);
                    }
                }
            }
            return dontRemove;
        });
    }
    on(nameOrHandler, handlerOrNothing) {
        return this.listen.apply(this, arguments);
    }
    off(bullshitWTF, context) {
        return this.unlisten.apply(this, arguments);
    }
    when() { return this.promise; }
    then(onOk, onFail) { return this.when().then(onOk, onFail); }
    after(onAny) { return this.then(onAny).catch(onAny); }
    catch(onFail) { return this.when().catch(onFail); }
    /**
     * Piping the events means that the other event must be triggered(happen) any time
     * this event happens and with exactly the same argument.
     */
    pipe(other) {
        this.on(other.getTriggerer());
    }
    unpipe(other) {
        this.off(other.getTriggerer());
    }
    removeListener(listener) {
        let listenerIndex = this.listeners.indexOf(listener);
        if (listenerIndex !== -1) {
            this.listeners.splice(listenerIndex, 1);
        }
    }
    addListener(options) {
        let { context, handler, once, onlyMatching, matchValue } = options;
        this.idCounter++;
        this.listeners.push({ context, handler, once, id: this.idCounter, onlyMatching, matchValue });
        return this.idCounter;
    }
}
exports.Event = Event;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Event;
//# sourceMappingURL=data:application/json;base64,