/// <reference path="../typings/index.d.ts"/>
const event_1 = require("../src/event");
describe('Core functionality: construction of event, triggering, listening', () => {
    it('Creates an Event instance, does nothing more, just doesn\'t fail', () => {
        let event = new event_1.Event();
    });
    it('Adds a listener, triggers the event, listener is invoked', (done) => {
        let event = new event_1.Event();
        event.listen(done);
        event.trigger();
    });
    it('invokes listener 2 times when triggered 2 times', (done) => {
        let event = new event_1.Event();
        let nExpected = 2;
        let nRegistered = 0;
        event.listen(() => {
            nRegistered++;
            if (nRegistered === nExpected)
                done();
        });
        for (let i = 0; i < nExpected; i++)
            event.trigger();
    });
    it('first trigger works as the event-promise resolution', (done) => {
        let event = new event_1.Event();
        event.then(done);
        event.trigger();
    });
    it('may be returned as the promise for mocha', () => {
        let event = new event_1.Event();
        event.trigger();
        return event;
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzaWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJiYXNpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw2Q0FBNkM7QUFDN0Msd0NBQW1DO0FBRW5DLFFBQVEsQ0FBQyxrRUFBa0UsRUFBRTtJQUN6RSxFQUFFLENBQUMsa0VBQWtFLEVBQUU7UUFDbkUsSUFBSSxLQUFLLEdBQUcsSUFBSSxhQUFLLEVBQVEsQ0FBQztJQUNsQyxDQUFDLENBQUMsQ0FBQztJQUNILEVBQUUsQ0FBQywwREFBMEQsRUFBRSxDQUFDLElBQWU7UUFDM0UsSUFBSSxLQUFLLEdBQUcsSUFBSSxhQUFLLEVBQVEsQ0FBQztRQUM5QixLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25CLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNwQixDQUFDLENBQUMsQ0FBQztJQUNILEVBQUUsQ0FBQyxpREFBaUQsRUFBRSxDQUFDLElBQWU7UUFDbEUsSUFBSSxLQUFLLEdBQUcsSUFBSSxhQUFLLEVBQVEsQ0FBQztRQUM5QixJQUFJLFNBQVMsR0FBRyxDQUFDLENBQUM7UUFDbEIsSUFBSSxXQUFXLEdBQUcsQ0FBQyxDQUFDO1FBQ3BCLEtBQUssQ0FBQyxNQUFNLENBQUM7WUFDVCxXQUFXLEVBQUUsQ0FBQztZQUNkLEVBQUUsQ0FBQyxDQUFDLFdBQVcsS0FBSyxTQUFTLENBQUM7Z0JBQUMsSUFBSSxFQUFFLENBQUM7UUFDMUMsQ0FBQyxDQUFDLENBQUM7UUFDSCxHQUFHLENBQUEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUMsQ0FBQyxHQUFHLFNBQVMsRUFBRSxDQUFDLEVBQUU7WUFBRSxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDdEQsQ0FBQyxDQUFDLENBQUM7SUFDSCxFQUFFLENBQUMscURBQXFELEVBQUUsQ0FBQyxJQUFlO1FBQ3RFLElBQUksS0FBSyxHQUFHLElBQUksYUFBSyxFQUFPLENBQUM7UUFDN0IsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqQixLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDcEIsQ0FBQyxDQUFDLENBQUM7SUFDSCxFQUFFLENBQUMsMENBQTBDLEVBQUU7UUFDM0MsSUFBSSxLQUFLLEdBQUcsSUFBSSxhQUFLLEVBQVEsQ0FBQztRQUM5QixLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDaEIsTUFBTSxDQUFDLEtBQUssQ0FBQztJQUNqQixDQUFDLENBQUMsQ0FBQTtBQUNOLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3R5cGluZ3MvaW5kZXguZC50c1wiLz5cbmltcG9ydCB7RXZlbnR9IGZyb20gJy4uL3NyYy9ldmVudCc7XG5pbXBvcnQgKiBhcyBkZWVwU3RyaWN0RXF1YWwgZnJvbSAnZGVlcC1zdHJpY3QtZXF1YWwnO1xuZGVzY3JpYmUoJ0NvcmUgZnVuY3Rpb25hbGl0eTogY29uc3RydWN0aW9uIG9mIGV2ZW50LCB0cmlnZ2VyaW5nLCBsaXN0ZW5pbmcnLCAoKSA9PiB7XG4gICAgaXQoJ0NyZWF0ZXMgYW4gRXZlbnQgaW5zdGFuY2UsIGRvZXMgbm90aGluZyBtb3JlLCBqdXN0IGRvZXNuXFwndCBmYWlsJywgKCkgPT4ge1xuICAgICAgICBsZXQgZXZlbnQgPSBuZXcgRXZlbnQ8dm9pZD4oKTtcbiAgICB9KTtcbiAgICBpdCgnQWRkcyBhIGxpc3RlbmVyLCB0cmlnZ2VycyB0aGUgZXZlbnQsIGxpc3RlbmVyIGlzIGludm9rZWQnLCAoZG9uZTogTW9jaGFEb25lKSA9PiB7XG4gICAgICAgIGxldCBldmVudCA9IG5ldyBFdmVudDx2b2lkPigpO1xuICAgICAgICBldmVudC5saXN0ZW4oZG9uZSk7XG4gICAgICAgIGV2ZW50LnRyaWdnZXIoKTtcbiAgICB9KTtcbiAgICBpdCgnaW52b2tlcyBsaXN0ZW5lciAyIHRpbWVzIHdoZW4gdHJpZ2dlcmVkIDIgdGltZXMnLCAoZG9uZTogTW9jaGFEb25lKSA9PiB7XG4gICAgICAgIGxldCBldmVudCA9IG5ldyBFdmVudDx2b2lkPigpO1xuICAgICAgICBsZXQgbkV4cGVjdGVkID0gMjtcbiAgICAgICAgbGV0IG5SZWdpc3RlcmVkID0gMDtcbiAgICAgICAgZXZlbnQubGlzdGVuKCgpID0+IHtcbiAgICAgICAgICAgIG5SZWdpc3RlcmVkKys7XG4gICAgICAgICAgICBpZiAoblJlZ2lzdGVyZWQgPT09IG5FeHBlY3RlZCkgZG9uZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgZm9yKGxldCBpID0gMDtpIDwgbkV4cGVjdGVkOyBpKyspIGV2ZW50LnRyaWdnZXIoKTtcbiAgICB9KTtcbiAgICBpdCgnZmlyc3QgdHJpZ2dlciB3b3JrcyBhcyB0aGUgZXZlbnQtcHJvbWlzZSByZXNvbHV0aW9uJywgKGRvbmU6IE1vY2hhRG9uZSkgPT4ge1xuICAgICAgICBsZXQgZXZlbnQgPSBuZXcgRXZlbnQ8YW55PigpO1xuICAgICAgICBldmVudC50aGVuKGRvbmUpO1xuICAgICAgICBldmVudC50cmlnZ2VyKCk7XG4gICAgfSk7XG4gICAgaXQoJ21heSBiZSByZXR1cm5lZCBhcyB0aGUgcHJvbWlzZSBmb3IgbW9jaGEnLCAoKSA9PiB7XG4gICAgICAgIGxldCBldmVudCA9IG5ldyBFdmVudDx2b2lkPigpO1xuICAgICAgICBldmVudC50cmlnZ2VyKCk7XG4gICAgICAgIHJldHVybiBldmVudDtcbiAgICB9KVxufSk7Il19