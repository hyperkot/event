/// <reference path="../typings/index.d.ts"/>
Object.defineProperty(exports, "__esModule", { value: true });
function _objectMatch(subject, proto, traversalStack = []) {
    switch (typeof proto) {
        case "undefined": return subject === undefined;
        case "number":
        case "boolean":
        case "string":
        case "function":
            return subject === proto;
        case "object":
            let isMatching = true;
            if (typeof subject !== "object")
                return false;
            if (!proto || !subject)
                return !subject && !proto;
            if (traversalStack.includes(subject)) {
                throw new Error("Recursion!");
            }
            for (let key in proto) {
                if (proto.hasOwnProperty(key)) {
                    traversalStack.push(subject);
                    isMatching = isMatching && _objectMatch(subject[key], proto[key], traversalStack);
                    traversalStack.pop();
                }
            }
            return isMatching;
        default:
            throw new Error(`Unexpected typeof: ${typeof proto}`);
    }
}
function objectMatch(subject, proto) {
    return _objectMatch(subject, proto);
}
/**
 * Represents an event and provides methods to observe it and to trigger it.
 */
class EventProperty {
    constructor() {
        this.listeners = [];
        this.isBeingTriggered = false;
        this.firstTriggerPromise = null;
        this.isFirstTriggerDone = false;
        this.idCounter = 0;
        this.firstTriggerPromise = new Promise((resolve, reject) => {
            this.resolveFirstTriggerPromise = resolve;
            this.rejectFirstTriggerPromise = reject;
        });
        this.trigger = this.trigger.bind(this);
    }
    /**
     * Triggers the event with given argument, invoking all of its handlers, and if
     * the event is triggered for the first time - removing the once event handlers and
     * saving given argument inertnally as first trigger argument.
     *
     * The argument is optional, since event can be of void type (`x= new Event<void>()`),
     * but if the event is not of a void type - you should allways pass an argument to
     * the trigger method.
     *
     * Trigger method returns a promise, which is resolved() whe all results of calling
     * callbacks are resolved.
     */
    trigger(eventArg) {
        if (this.isBeingTriggered) {
            throw new Error(`Event triggered during trigger handling - suspecting recursive event.`);
        }
        this.isBeingTriggered = true;
        if (!this.isFirstTriggerDone) {
            this.isFirstTriggerDone = true;
            this.resolveFirstTriggerPromise(eventArg);
        }
        return Promise.all(this.listeners.slice().map((listener) => {
            let doCall = true;
            let cbReturn;
            if (listener.onlyMatching) {
                doCall = objectMatch(eventArg, listener.matchValue);
            }
            if (doCall) {
                if (listener.context) {
                    cbReturn = listener.handler.call(listener.context, eventArg);
                }
                else {
                    cbReturn = listener.handler.call(null, eventArg);
                }
                if (listener.once) {
                    this.removeListener(listener);
                }
                if (!(cbReturn instanceof Promise))
                    cbReturn = Promise.resolve(cbReturn);
            }
            else {
                cbReturn = Promise.resolve();
            }
            return cbReturn;
        })).then(() => {
            this.isBeingTriggered = false;
        });
    }
    /**
     * Adds a listener. If once=true then adds once listener which means that listener will be removed,
     * when event triggers for the first time. Also if event already was triggered for the first time
     * when you call 'add()' then once listener will not be added but instead invoked immidiately,
     * with argument, that event was triggered with the first time.
     */
    on(handler, context) {
        return this.addListener({ handler, context });
    }
    /**
     * Adds a listener to the event
     */
    once(handler, context = null) {
        return this.addListener({ context, handler, once: true });
    }
    /**
     * Adds a listener, which will be invoked only if the event-argument is deeply-equal to
     * the given value.
     */
    match(value, handler, context) {
        return this.addListener({ handler, context, onlyMatching: true, matchValue: value });
    }
    /**
     * Combines 'match' and 'once' features.
     */
    matchOnce(value, handler, context = null) {
        return this.addListener({
            context,
            handler,
            once: true,
            onlyMatching: true,
            matchValue: value
        });
    }
    off(...args) {
        let context = null, handler = null, idToRemove = null;
        switch (args.length) {
            case 0:
                this.listeners = [];
                return;
            case 1:
                if (typeof args[0] === "number") {
                    idToRemove = args[0];
                }
                else if (typeof args[0] === "function") {
                    handler = args[0];
                    context = null;
                }
                else if (typeof args[0] === "object") {
                    handler = null;
                    context = args[0];
                }
                else {
                    throw new Error(`Invalid argument: ${typeof args[0]}`);
                }
                break;
            case 2:
                handler = args[0];
                context = args[1];
                break;
            default:
                throw new Error("Unsupported arguments format.");
        }
        this.listeners = this.listeners.filter((hConf) => {
            let differentHandler = hConf.handler !== handler;
            let noHandlerGiven = !handler;
            let noContextGiven = !context;
            let confHasNoContext = !hConf.context;
            let differentContext = hConf.context !== context;
            let dontRemove;
            if (idToRemove !== null) {
                dontRemove = idToRemove !== hConf.id;
            }
            else {
                if (noHandlerGiven) {
                    if (noContextGiven) {
                        throw new Error("Unexpected circumstances.");
                    }
                    else {
                        dontRemove = confHasNoContext || (context !== hConf.context);
                    }
                }
                else {
                    if (differentHandler) {
                        dontRemove = true;
                    }
                    else {
                        if (noContextGiven) {
                            dontRemove = (!confHasNoContext) || (differentHandler);
                        }
                        else {
                            dontRemove = differentContext || differentHandler;
                        }
                    }
                }
            }
            return dontRemove;
        });
    }
    next() {
        return new Promise((resolve, reject) => {
            try {
                this.once(resolve);
            }
            catch (e) {
                reject(e);
            }
        });
    }
    first() {
        return this.firstTriggerPromise;
    }
    /**
     * Piping the events means that the other event must be triggered(happen) any time
     * this event happens and with exactly the same argument.
     */
    pipe(other) {
        this.on(other.trigger);
    }
    unpipe(other) {
        this.off(other.trigger);
    }
    removeListener(listener) {
        let listenerIndex = this.listeners.indexOf(listener);
        if (listenerIndex !== -1) {
            this.listeners.splice(listenerIndex, 1);
        }
    }
    addListener(options) {
        let { context, handler, once, onlyMatching, matchValue } = options;
        this.idCounter++;
        this.listeners.push({ context, handler, once, id: this.idCounter, onlyMatching, matchValue });
        return this.idCounter;
    }
}
exports.EventProperty = EventProperty;
exports.default = EventProperty;
//# sourceMappingURL=data:application/json;base64,