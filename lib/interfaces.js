Object.defineProperty(exports, "__esModule", { value: true });
var Interfaces;
(function (Interfaces) {
    /**
     * This method is used just to emphasize the meaning of the value.
     * Otherwise we could just use typeof id === "number" directly.
     */
    function isListenerId(id) { return typeof id === "number"; }
    Interfaces.isListenerId = isListenerId;
})(Interfaces || (Interfaces = {}));
exports.default = Interfaces;
//# sourceMappingURL=data:application/json;base64,