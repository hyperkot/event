/// <reference path="../../typings/index.d.ts"/>
Object.defineProperty(exports, "__esModule", { value: true });
const chai = require("chai");
const event_1 = require("../event");
let expect = chai.expect;
describe("EventProperty", () => {
    it("constructor", () => {
        new event_1.EventProperty();
    });
    describe("on", () => {
        testTriggers("on");
        it("invokes all listeners", (done) => {
            let event = new event_1.EventProperty.Void();
            let resolve1 = null;
            let resolve2 = null;
            let promise1 = new Promise((resolve) => { resolve1 = resolve; });
            let promise2 = new Promise((resolve) => { resolve2 = resolve; });
            event.on(resolve1);
            event.on(resolve2);
            Promise.all([promise1, promise2]).then(function () { done(); }).catch(done);
            event.emit();
        });
        it("invokes listeners on each emit", (done) => {
            let event = new event_1.EventProperty.Void();
            let nExpected = 5;
            let nRegistered = 0;
            event.on(() => {
                nRegistered++;
                if (nRegistered === nExpected)
                    done();
            });
            for (let i = 0; i < nExpected; i++)
                event.emit();
        });
    });
    describe("off", () => {
        it("by handler", () => {
            let event = new event_1.EventProperty.Void();
            let handler = () => {
                throw new Error("Should not be invoked");
            };
            event.on(handler);
            event.off(handler);
            event.emit();
        });
        it("by id", () => {
            let event = new event_1.EventProperty.Void();
            let handler = () => {
                throw new Error("Should not be invoked");
            };
            let id = event.on(handler);
            event.off(id);
            event.emit();
        });
        it("by context", (done) => {
            let event = new event_1.EventProperty.Void();
            let context = {};
            let handler = function () {
                if (this === context)
                    throw new Error("Should not be invoked");
                else
                    done();
            };
            // Off by context should remove all handlers with the
            // context but should not affect the handlers passed without context
            event.on(handler, context);
            event.on(handler, context);
            event.on(handler);
            event.off(context);
            event.emit();
        });
        it("clears", (done) => {
            let event = new event_1.EventProperty.Void();
            let handler = function () {
                if (this === context)
                    throw new Error("Should not be invoked");
                else
                    done();
            };
            // Off by context should remove all handlers with the
            // context but should not affect the handlers passed without context
            event.on(handler);
            event.on(handler);
            event.off();
            setTimeout(done, 10);
            event.emit();
        });
    });
    describe("once", () => {
        testTriggers("once");
        it("triggers once", () => {
            let event = new event_1.EventProperty.Void();
            let isFirst = true;
            event.once(function () {
                chai.assert(isFirst);
                isFirst = false;
            });
            event.emit();
            event.emit();
        });
    });
    describe("match", () => {
        testMatchTriggers("match");
        it("matches object part", (done) => {
            let event = new event_1.EventProperty();
            event.match({ a: 1, b: 2 }, function () { done(); });
            event.emit({ a: 1, b: 2, c: 3, d: "x" });
        });
        it("matches deeper", (done) => {
            let event = new event_1.EventProperty();
            event.match({ a: { x: "y" }, c: [1, 2] }, function () { done(); });
            event.emit({ a: { x: "y", z: { r: 1 } }, c: [1, 2, { x: "?" }, null] });
        });
        it("matches regexp", (done) => {
            let event = new event_1.EventProperty();
            event.match(/test[123]+x/, function () { done(); });
            event.emit("test-test2xs");
        });
    });
    describe("matchOnce", () => {
        testMatchTriggers("matchOnce");
        it("matches once", () => {
            let event = new event_1.EventProperty();
            let isFirst = true;
            event.matchOnce("match", function () {
                chai.assert(isFirst);
                isFirst = false;
            });
            event.emit("match");
            event.emit("match");
            event.emit("unmatch");
        });
    });
    describe("pipe", () => {
        it("passes argument, get listenerId", (done) => {
            let eventFrom = new event_1.EventProperty();
            let eventTo = new event_1.EventProperty();
            let testArg = "test";
            eventTo.on(function (arg) {
                expect(arg).to.equal(testArg);
                done();
            });
            let id = eventFrom.pipe(eventTo);
            expect(typeof id).to.equal("number");
            eventFrom.emit(testArg);
        });
        it("offs with id", () => {
            let eventFrom = new event_1.EventProperty.Void();
            let eventTo = new event_1.EventProperty.Void();
            eventTo.on(function () { throw new Error("Should not happen"); });
            let id = eventFrom.pipe(eventTo);
            eventFrom.off(id);
            eventFrom.emit();
        });
        it("offs with event", () => {
            let eventFrom = new event_1.EventProperty.Void();
            let eventTo = new event_1.EventProperty.Void();
            eventTo.on(function () { throw new Error("Should not happen"); });
            eventFrom.pipe(eventTo);
            eventFrom.off(eventTo);
            eventFrom.emit();
        });
    });
    describe("route", () => {
        it("string", () => {
            let eventFrom = new event_1.EventProperty();
            let eventTo = new event_1.EventProperty();
            eventTo.on(function (arg) {
                expect(arg).to.equal("test");
            });
            let id = eventFrom.route("test", eventTo);
            expect(typeof id).to.equal("number");
            eventFrom.emit("test");
            eventFrom.emit("random");
            eventFrom.emit("any");
        });
        it("regexp", () => {
            let eventFrom = new event_1.EventProperty();
            let eventTo = new event_1.EventProperty();
            let pass = 1;
            eventTo.on(function (arg) {
                chai.assert(/^\/[a-zA-Z]*/.test(arg));
                chai.assert(!--pass);
            });
            let id = eventFrom.route(/^\/[a-zA-Z]+/, eventTo);
            expect(typeof id).to.equal("number");
            eventFrom.emit("/root");
            eventFrom.emit("random");
            eventFrom.emit("/34/");
        });
    });
    describe("first", () => {
        it("resolves with value", (done) => {
            let event = new event_1.EventProperty();
            let testArg = "test";
            event.first.then((arg) => {
                expect(arg).to.equal(testArg);
                done();
            });
            event.emit(testArg);
        });
        it("can be caught after emit", (done) => {
            let event = new event_1.EventProperty.Void();
            event.emit();
            event.first.then(() => {
                done();
            });
        });
    });
    describe("next", () => {
        it("resolves with value", (done) => {
            let event = new event_1.EventProperty();
            let testArg = "test";
            event.next().then((arg) => {
                expect(arg).to.equal(testArg);
                done();
            });
            event.emit(testArg);
        });
        it("creates new promises", (done) => {
            let event = new event_1.EventProperty();
            let testArg1 = "test1";
            let testArg2 = "test2";
            event.next().then((arg) => {
                expect(arg).to.equal(testArg1);
                event.next().then((arg) => {
                    expect(arg).to.equal(testArg2);
                    event.next().then((arg) => {
                        expect(arg).to.equal(testArg1);
                        done();
                    });
                    event.emit(testArg1);
                });
                event.emit(testArg2);
            });
            event.emit(testArg1);
        });
    });
    it("EventProperty.make", (done) => {
        class Test {
            constructor() {
                [this.event, this.emitter] = event_1.EventProperty.make();
            }
            test() {
                this.event.emit("test");
            }
        }
        let instance = new Test();
        instance.emitter.on(() => done());
        instance.test();
    });
});
function testTriggers(method) {
    it("returns listenerId", () => {
        let event = new event_1.EventProperty();
        let id = event[method](() => { });
        expect(typeof id).to.equal("number");
    });
    it("triggers", (done) => {
        let event = new event_1.EventProperty.Void();
        event[method](done);
        event.emit();
    });
    it("passes argument", (done) => {
        let testArg = "test";
        let event = new event_1.EventProperty();
        event[method]((arg) => {
            expect(arg).to.be.equal(testArg);
            done();
        });
        event.emit(testArg);
    });
    it("passes context", (done) => {
        let event = new event_1.EventProperty.Void();
        let listener;
        listener = {
            itIsListener: true,
            fn() {
                chai.expect(this).to.be.equal(listener);
                done();
            }
        };
        event[method](listener.fn, listener);
        event.emit();
    });
}
function testMatchTriggers(method) {
    let match = "testMatchValue";
    it("returns listenerId", () => {
        let event = new event_1.EventProperty();
        let id = event[method](match, () => { });
        expect(typeof id).to.equal("number");
    });
    it("triggers", (done) => {
        let event = new event_1.EventProperty();
        event[method](match, function () { done(); });
        event.emit(match);
    });
    it("passes argument", (done) => {
        let testArg = "test";
        let event = new event_1.EventProperty();
        event[method](testArg, (arg) => {
            expect(arg).to.be.equal(testArg);
            done();
        });
        event.emit(testArg);
    });
    it("passes context", (done) => {
        let event = new event_1.EventProperty();
        let listener;
        listener = {
            itIsListener: true,
            fn() {
                chai.expect(this).to.be.equal(listener);
                done();
            }
        };
        event[method](match, listener.fn, listener);
        event.emit(match);
    });
    it("ignores irrelevant emits", () => {
        let event = new event_1.EventProperty();
        event[method](match, function () { throw new Error("Must not be invoked"); });
        event.emit("");
        event.emit("abc");
        event.emit(null);
    });
}
//# sourceMappingURL=data:application/json;base64,