/// <reference path="../../typings/index.d.ts"/>
Object.defineProperty(exports, "__esModule", { value: true });
const chai = require("chai");
const event_1 = require("../event");
let expect = chai.expect;
function testTriggers(method) {
    it("returns listenerId", () => {
        let event = new event_1.EventProperty();
        let id = event[method](() => { });
        expect(typeof id).to.equal("number");
    });
    it("triggers", (done) => {
        let event = new event_1.EventProperty.Void();
        event[method](done);
        event.emit();
    });
    it("passes argument", (done) => {
        let testArg = "test";
        let event = new event_1.EventProperty();
        event[method]((arg) => {
            expect(arg).to.be.equal(testArg);
            done();
        });
        event.emit(testArg);
    });
    it("passes context", (done) => {
        let event = new event_1.EventProperty.Void();
        let listener;
        listener = {
            itIsListener: true,
            fn() {
                chai.expect(this).to.be.equal(listener);
                done();
            }
        };
        event[method](listener.fn, listener);
        event.emit();
    });
}
function testMatchTriggers(method) {
    let match = "testMatchValue";
    it("returns listenerId", () => {
        let event = new event_1.EventProperty();
        let id = event[method](match, () => { });
        expect(typeof id).to.equal("number");
    });
    it("triggers", (done) => {
        let event = new event_1.EventProperty();
        event[method](match, function () { done(); });
        event.emit(match);
    });
    it("passes argument", (done) => {
        let testArg = "test";
        let event = new event_1.EventProperty();
        event[method](testArg, (arg) => {
            expect(arg).to.be.equal(testArg);
            done();
        });
        event.emit(testArg);
    });
    it("passes context", (done) => {
        let event = new event_1.EventProperty();
        let listener;
        listener = {
            itIsListener: true,
            fn() {
                chai.expect(this).to.be.equal(listener);
                done();
            }
        };
        event[method](match, listener.fn, listener);
        event.emit(match);
    });
    it("ignores irrelevant emits", () => {
        let event = new event_1.EventProperty();
        event[method](match, function () { throw new Error("Must not be invoked"); });
        event.emit("");
        event.emit("abc");
        event.emit(null);
    });
}
describe("EventProperty", () => {
    it("constructor", () => {
        new event_1.EventProperty();
    });
    describe("on", () => {
        testTriggers("on");
        it("invokes all listeners", (done) => {
            let event = new event_1.EventProperty.Void();
            let resolve1 = null;
            let resolve2 = null;
            let promise1 = new Promise((resolve) => { resolve1 = resolve; });
            let promise2 = new Promise((resolve) => { resolve2 = resolve; });
            event.on(resolve1);
            event.on(resolve2);
            Promise.all([promise1, promise2]).then(function () { done(); }).catch(done);
            event.emit();
        });
        it("invokes listeners on each emit", (done) => {
            let event = new event_1.EventProperty.Void();
            let nExpected = 5;
            let nRegistered = 0;
            event.on(() => {
                nRegistered++;
                if (nRegistered === nExpected)
                    done();
            });
            for (let i = 0; i < nExpected; i++)
                event.emit();
        });
    });
    describe("off", () => {
        it("by handler", () => {
            let event = new event_1.EventProperty.Void();
            let handler = () => {
                throw new Error("Should not be invoked");
            };
            event.on(handler);
            event.off(handler);
            event.emit();
        });
        it("by id", () => {
            let event = new event_1.EventProperty.Void();
            let handler = () => {
                throw new Error("Should not be invoked");
            };
            let id = event.on(handler);
            event.off(id);
            event.emit();
        });
        it("by context", (done) => {
            let event = new event_1.EventProperty.Void();
            let context = {};
            let handler = function () {
                if (this === context)
                    throw new Error("Should not be invoked");
                else
                    done();
            };
            // Off by context should remove all handlers with the
            // context but should not affect the handlers passed without context
            event.on(handler, context);
            event.on(handler, context);
            event.on(handler);
            event.off(context);
            event.emit();
        });
        it("clears", (done) => {
            let event = new event_1.EventProperty.Void();
            let handler = function () {
                if (this === context)
                    throw new Error("Should not be invoked");
                else
                    done();
            };
            // Off by context should remove all handlers with the
            // context but should not affect the handlers passed without context
            event.on(handler);
            event.on(handler);
            event.off();
            setTimeout(done, 10);
            event.emit();
        });
    });
    describe("once", () => {
        testTriggers("once");
        it("triggers once", () => {
            let event = new event_1.EventProperty.Void();
            let isFirst = true;
            event.once(function () {
                chai.assert(isFirst);
                isFirst = false;
            });
            event.emit();
            event.emit();
        });
    });
    describe("match", () => {
        testMatchTriggers("match");
        it("matches object part", (done) => {
            let event = new event_1.EventProperty();
            event.match({ a: 1, b: 2 }, function () { done(); });
            event.emit({ a: 1, b: 2, c: 3, d: "x" });
        });
        it("matches deeper", (done) => {
            let event = new event_1.EventProperty();
            event.match({ a: { x: "y" }, c: [1, 2] }, function () { done(); });
            event.emit({ a: { x: "y", z: { r: 1 } }, c: [1, 2, { x: "?" }, null] });
        });
        it("matches regexp", (done) => {
            let event = new event_1.EventProperty();
            event.match(/test[123]+x/, function () { done(); });
            event.emit("test-test2xs");
        });
    });
    describe("matchOnce", () => {
        testMatchTriggers("matchOnce");
        it("matches once", () => {
            let event = new event_1.EventProperty();
            let isFirst = true;
            event.matchOnce("match", function () {
                chai.assert(isFirst);
                isFirst = false;
            });
            event.emit("match");
            event.emit("match");
            event.emit("unmatch");
        });
    });
    describe("pipe", () => {
        it("passes argument, get listenerId", (done) => {
            let eventFrom = new event_1.EventProperty();
            let eventTo = new event_1.EventProperty();
            let testArg = "test";
            eventTo.on(function (arg) {
                expect(arg).to.equal(testArg);
                done();
            });
            let id = eventFrom.pipe(eventTo);
            expect(typeof id).to.equal("number");
            eventFrom.emit(testArg);
        });
        it("offs with id", () => {
            let eventFrom = new event_1.EventProperty.Void();
            let eventTo = new event_1.EventProperty.Void();
            eventTo.on(function () { throw new Error("Should not happen"); });
            let id = eventFrom.pipe(eventTo);
            eventFrom.off(id);
            eventFrom.emit();
        });
        it("offs with event", () => {
            let eventFrom = new event_1.EventProperty.Void();
            let eventTo = new event_1.EventProperty.Void();
            eventTo.on(function () { throw new Error("Should not happen"); });
            eventFrom.pipe(eventTo);
            eventFrom.off(eventTo);
            eventFrom.emit();
        });
    });
    describe("route", () => {
        it("string", () => {
            let eventFrom = new event_1.EventProperty();
            let eventTo = new event_1.EventProperty();
            eventTo.on(function (arg) {
                expect(arg).to.equal("test");
            });
            let id = eventFrom.route("test", eventTo);
            expect(typeof id).to.equal("number");
            eventFrom.emit("test");
            eventFrom.emit("random");
            eventFrom.emit("any");
        });
        it("regexp", () => {
            let eventFrom = new event_1.EventProperty();
            let eventTo = new event_1.EventProperty();
            let pass = 1;
            eventTo.on(function (arg) {
                chai.assert(/^\/[a-zA-Z]*/.test(arg));
                chai.assert(!--pass);
            });
            let id = eventFrom.route(/^\/[a-zA-Z]+/, eventTo);
            expect(typeof id).to.equal("number");
            eventFrom.emit("/root");
            eventFrom.emit("random");
            eventFrom.emit("/34/");
        });
    });
    describe("first", () => {
        it("resolves with value", (done) => {
            let event = new event_1.EventProperty();
            let testArg = "test";
            event.first.then((arg) => {
                expect(arg).to.equal(testArg);
                done();
            });
            event.emit(testArg);
        });
        it("can be caught after emit", (done) => {
            let event = new event_1.EventProperty.Void();
            event.emit();
            event.first.then(() => {
                done();
            });
        });
    });
    describe("next", () => {
        it("resolves with value", (done) => {
            let event = new event_1.EventProperty();
            let testArg = "test";
            event.next().then((arg) => {
                expect(arg).to.equal(testArg);
                done();
            });
            event.emit(testArg);
        });
        it("creates new promises", (done) => {
            let event = new event_1.EventProperty();
            let testArg1 = "test1";
            let testArg2 = "test2";
            event.next().then((arg) => {
                expect(arg).to.equal(testArg1);
                event.next().then((arg) => {
                    expect(arg).to.equal(testArg2);
                    event.next().then((arg) => {
                        expect(arg).to.equal(testArg1);
                        done();
                    });
                    event.emit(testArg1);
                });
                event.emit(testArg2);
            });
            event.emit(testArg1);
        });
    });
    it("EventProperty.make", (done) => {
        class Test {
            constructor() {
                [this.event, this.emitter] = event_1.EventProperty.make();
            }
            test() {
                this.event.emit("test");
            }
        }
        let instance = new Test();
        instance.emitter.on(() => done());
        instance.test();
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdGVzdC9ldmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxnREFBZ0Q7O0FBRWhELDZCQUE2QjtBQUM3QixvQ0FBdUM7QUFFdkMsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztBQUV6QixzQkFBc0IsTUFBYztJQUNoQyxFQUFFLENBQUMsb0JBQW9CLEVBQUU7UUFDckIsSUFBSSxLQUFLLEdBQUcsSUFBSSxxQkFBYSxFQUFRLENBQUM7UUFDdEMsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQU8sQ0FBQyxDQUFDLENBQUM7UUFDakMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN6QyxDQUFDLENBQUMsQ0FBQztJQUNILEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxJQUFlO1FBQzNCLElBQUksS0FBSyxHQUFHLElBQUkscUJBQWEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNyQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDcEIsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2pCLENBQUMsQ0FBQyxDQUFDO0lBQ0gsRUFBRSxDQUFDLGlCQUFpQixFQUFFLENBQUMsSUFBZTtRQUNsQyxJQUFJLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxLQUFLLEdBQUcsSUFBSSxxQkFBYSxFQUFVLENBQUM7UUFDeEMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBVztZQUN0QixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDakMsSUFBSSxFQUFFLENBQUM7UUFDWCxDQUFDLENBQUMsQ0FBQztRQUNILEtBQUssQ0FB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LENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3pCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7SUFDSCxFQUFFLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxJQUFlO1FBQ3JDO1lBR0k7Z0JBQ0ksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxxQkFBYSxDQUFDLElBQUksRUFBVSxDQUFDO1lBQzlELENBQUM7WUFDRCxJQUFJO2dCQUNBLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzVCLENBQUM7U0FDSjtRQUNELElBQUksUUFBUSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7UUFDMUIsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ2xDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNwQixDQUFDLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL3R5cGluZ3MvaW5kZXguZC50c1wiLz5cblxuaW1wb3J0ICogYXMgY2hhaSBmcm9tIFwiY2hhaVwiO1xuaW1wb3J0IHtFdmVudFByb3BlcnR5fSBmcm9tIFwiLi4vZXZlbnRcIjtcbmltcG9ydCB7YXNzZXJ0fSBmcm9tIFwifmNoYWkvbGliL0NoYWlcIjtcbmxldCBleHBlY3QgPSBjaGFpLmV4cGVjdDtcblxuZnVuY3Rpb24gdGVzdFRyaWdnZXJzKG1ldGhvZDogc3RyaW5nKSB7XG4gICAgaXQoXCJyZXR1cm5zIGxpc3RlbmVySWRcIiwgKCkgPT4ge1xuICAgICAgICBsZXQgZXZlbnQgPSBuZXcgRXZlbnRQcm9wZXJ0eTx2b2lkPigpO1xuICAgICAgICBsZXQgaWQgPSBldmVudFttZXRob2RdKCgpID0+IHt9KTtcbiAgICAgICAgZXhwZWN0KHR5cGVvZiBpZCkudG8uZXF1YWwoXCJudW1iZXJcIik7XG4gICAgfSk7XG4gICAgaXQoXCJ0cmlnZ2Vyc1wiLCAoZG9uZTogTW9jaGFEb25lKSA9PiB7XG4gICAgICAgIGxldCBldmVudCA9IG5ldyBFdmVudFByb3BlcnR5LlZvaWQoKTtcbiAgICAgICAgZXZlbnRbbWV0aG9kXShkb25lKTtcbiAgICAgICAgZXZlbnQuZW1pdCgpO1xuICAgIH0pO1xuICAgIGl0KFwicGFzc2VzIGFyZ3VtZW50XCIsIChkb25lOiBNb2NoYURvbmUpID0+IHtcbiAgICAgICAgbGV0IHRlc3RBcmcgPSBcInRlc3RcIjtcbiAgICAgICAgbGV0IGV2ZW50ID0gbmV3IEV2ZW50UHJvcGVydHk8c3RyaW5nPigpO1xuICAgICAgICBldmVudFttZXRob2RdKChhcmc6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgZXhwZWN0KGFyZykudG8uYmUuZXF1YWwodGVzdEFyZyk7XG4gICAgICAgICAgICBkb25lKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBldmVudC5lbWl0KHRlc3RBcmcpO1xuICAgIH0pO1xuICAgIGl0KFwicGFzc2VzIGNvbnRleHRcIiwgKGRvbmU6IE1vY2hhRG9uZSkgPT4ge1xuICAgICAgICBsZXQgZXZlbnQgPSBuZXcgRXZlbnRQcm9wZXJ0eS5Wb2lkKCk7XG4gICAgICAgIGxldCBsaXN0ZW5lcjoge1xuICAgICAgICAgICAgaXRJc0xpc3RlbmVyOiBib29sZWFuO1xuICAgICAgICAgICAgZm46ICgpID0+IHZvaWQ7XG4gICAgICAgIH07XG4gICAgICAgIGxpc3RlbmVyICA9IHtcbiAgICAgICAgICAgIGl0SXNMaXN0ZW5lcjogdHJ1ZSxcbiAgICAgICAgICAgIGZuKCkge1xuICAgICAgICAgICAgICAgIGNoYWkuZXhwZWN0KHRoaXMpLnRvLmJlLmVxdWFsKGxpc3RlbmVyKTtcbiAgICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGV2ZW50W21ldGhvZF0obGlzdGVuZXIuZm4sIGxpc3RlbmVyKTtcbiAgICAgICAgZXZlbnQuZW1pdCgpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiB0ZXN0TWF0Y2hUcmlnZ2VycyhtZXRob2Q6IHN0cmluZykge1xuICAgIGxldCBtYXRjaCA9IFwidGVzdE1hdGNoVmFsdWVcIjtcbiAgICBpdChcInJldHVybnMgbGlzdGVuZXJJZFwiLCAoKSA9PiB7XG4gICAgICAgIGxldCBldmVudCA9IG5ldyBFdmVudFByb3BlcnR5PHN0cmluZz4oKTtcbiAgICAgICAgbGV0IGlkID0gZXZlbnRbbWV0aG9kXShtYXRjaCwgKCkgPT4ge30pO1xuICAgICAgICBleHBlY3QodHlwZW9mIGlkKS50by5lcXVhbChcIm51bWJlclwiKTtcbiAgICB9KTtcbiAgICBpdChcInRyaWdnZXJzXCIsIChkb25lOiBNb2NoYURvbmUpID0+IHtcbiAgICAgICAgbGV0IGV2ZW50ID0gbmV3IEV2ZW50UHJvcGVydHk8c3RyaW5nPigpO1xuICAgICAgICBldmVudFttZXRob2RdKG1hdGNoLCBmdW5jdGlvbiAoKSB7IGRvbmUoKTsgfSk7XG4gICAgICAgIGV2ZW50LmVtaXQobWF0Y2gpO1xuICAgIH0pO1xuICAgIGl0KFwicGFzc2VzIGFyZ3VtZW50XCIsIChkb25lOiBNb2NoYURvbmUpID0+IHtcbiAgICAgICAgbGV0IHRlc3RBcmcgPSBcInRlc3RcIjtcbiAgICAgICAgbGV0IGV2ZW50ID0gbmV3IEV2ZW50UHJvcGVydHk8c3RyaW5nPigpO1xuICAgICAgICBldmVudFttZXRob2RdKHRlc3RBcmcsIChhcmc6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgZXhwZWN0KGFyZykudG8uYmUuZXF1YWwodGVzdEFyZyk7XG4gICAgICAgICAgICBkb25lKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBldmVudC5lbWl0KHRlc3RBcmcpO1xuICAgIH0pO1xuICAgIGl0KFwicGFzc2VzIGNvbnRleHRcIiwgKGRvbmU6IE1vY2hhRG9uZSkgPT4ge1xuICAgICAgICBsZXQgZXZlbnQgPSBuZXcgRXZlbnRQcm9wZXJ0eTxzdHJpbmc+KCk7XG4gICAgICAgIGxldCBsaXN0ZW5lcjoge1xuICAgICAgICAgICAgaXRJc0xpc3RlbmVyOiBib29sZWFuO1xuICAgICAgICAgICAgZm46ICgpID0+IHZvaWQ7XG4gICAgICAgIH07XG4gICAgICAgIGxpc3RlbmVyICA9IHtcbiAgICAgICAgICAgIGl0SXNMaXN0ZW5lcjogdHJ1ZSxcbiAgICAgICAgICAgIGZuKCkge1xuICAgICAgICAgICAgICAgIGNoYWkuZXhwZWN0KHRoaXMpLnRvLmJlLmVxdWFsKGxpc3RlbmVyKTtcbiAgICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGV2ZW50W21ldGhvZF0obWF0Y2gsIGxpc3RlbmVyLmZuLCBsaXN0ZW5lcik7XG4gICAgICAgIGV2ZW50LmVtaXQobWF0Y2gpO1xuICAgIH0pO1xuICAgIGl0KFwiaWdub3JlcyBpcnJlbGV2YW50IGVtaXRzXCIsICgpID0+IHtcbiAgICAgICAgbGV0IGV2ZW50ID0gbmV3IEV2ZW50UHJvcGVydHk8c3RyaW5nPigpO1xuICAgICAgICBldmVudFttZXRob2RdKG1hdGNoLCBmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBFcnJvcihcIk11c3Qgbm90IGJlIGludm9rZWRcIik7IH0pO1xuICAgICAgICBldmVudC5lbWl0KFwiXCIpO1xuICAgICAgICBldmVudC5lbWl0KFwiYWJjXCIpO1xuICAgICAgICBldmVudC5lbWl0KG51bGwpO1xuICAgIH0pO1xufVxuXG5kZXNjcmliZShcIkV2ZW50UHJvcGVydHlcIiwgKCkgPT4ge1xuICAgIGl0KFwiY29uc3RydWN0b3JcIiwgKCkgPT4ge1xuICAgICAgICBuZXcgRXZlbnRQcm9wZXJ0eTx2b2lkPigpO1xuICAgIH0pO1xuICAgIGRlc2NyaWJlKFwib25cIiwgKCkgPT4ge1xuICAgICAgICB0ZXN0VHJpZ2dlcnMoXCJvblwiKTtcbiAgICAgICAgaXQoXCJpbnZva2VzIGFsbCBsaXN0ZW5lcnNcIiwgKGRvbmU6IE1vY2hhRG9uZSkgPT4ge1xuICAgICAgICAgICAgbGV0IGV2ZW50ID0gbmV3IEV2ZW50UHJvcGVydHkuVm9pZCgpO1xuICAgICAgICAgICAgbGV0IHJlc29sdmUxOiAoKSA9PiB2b2lkID0gbnVsbDtcbiAgICAgICAgICAgIGxldCByZXNvbHZlMjogKCkgPT4gdm9pZCA9IG51bGw7XG4gICAgICAgICAgICBsZXQgcHJvbWlzZTE6IFByb21pc2U8YW55PiA9IG5ldyBQcm9taXNlPGFueT4oKHJlc29sdmUpID0+IHsgcmVzb2x2ZTEgPSByZXNvbHZlOyB9KTtcbiAgICAgICAgICAgIGxldCBwcm9taXNlMjogUHJvbWlzZTxhbnk+ID0gbmV3IFByb21pc2U8YW55PigocmVzb2x2ZSkgPT4geyByZXNvbHZlMiA9IHJlc29sdmU7IH0pO1xuICAgICAgICAgICAgZXZlbnQub24ocmVzb2x2ZTEpO1xuICAgICAgICAgICAgZXZlbnQub24ocmVzb2x2ZTIpO1xuICAgICAgICAgICAgUHJvbWlzZS5hbGwoW3Byb21pc2UxLCBwcm9taXNlMl0pLnRoZW4oZnVuY3Rpb24oKXsgZG9uZSgpOyB9KS5jYXRjaChkb25lKTtcbiAgICAgICAgICAgIGV2ZW50LmVtaXQoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KFwiaW52b2tlcyBsaXN0ZW5lcnMgb24gZWFjaCBlbWl0XCIsIChkb25lOiBNb2NoYURvbmUpID0+IHtcbiAgICAgICAgICAgIGxldCBldmVudCA9IG5ldyBFdmVudFByb3BlcnR5LlZvaWQoKTtcbiAgICAgICAgICAgIGxldCBuRXhwZWN0ZWQgPSA1O1xuICAgICAgICAgICAgbGV0IG5SZWdpc3RlcmVkID0gMDtcbiAgICAgICAgICAgIGV2ZW50Lm9uKCgpID0+IHtcbiAgICAgICAgICAgICAgICBuUmVnaXN0ZXJlZCsrO1xuICAgICAgICAgICAgICAgIGlmIChuUmVnaXN0ZXJlZCA9PT0gbkV4cGVjdGVkKSBkb25lKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbkV4cGVjdGVkOyBpKyspIGV2ZW50LmVtaXQoKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZShcIm9mZlwiLCAoKSA9PiB7XG4gICAgICAgIGl0KFwiYnkgaGFuZGxlclwiLCAoKSA9PiB7XG4gICAgICAgICAgICBsZXQgZXZlbnQgPSBuZXcgRXZlbnRQcm9wZXJ0eS5Wb2lkKCk7XG4gICAgICAgICAgICBsZXQgaGFuZGxlciA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTaG91bGQgbm90IGJlIGludm9rZWRcIik7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBldmVudC5vbihoYW5kbGVyKTtcbiAgICAgICAgICAgIGV2ZW50Lm9mZihoYW5kbGVyKTtcblxuICAgICAgICAgICAgZXZlbnQuZW1pdCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoXCJieSBpZFwiLCAoKSA9PiB7XG4gICAgICAgICAgICBsZXQgZXZlbnQgPSBuZXcgRXZlbnRQcm9wZXJ0eS5Wb2lkKCk7XG4gICAgICAgICAgICBsZXQgaGFuZGxlciA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTaG91bGQgbm90IGJlIGludm9rZWRcIik7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBsZXQgaWQgPSBldmVudC5vbihoYW5kbGVyKTtcbiAgICAgICAgICAgIGV2ZW50Lm9mZihpZCk7XG5cbiAgICAgICAgICAgIGV2ZW50LmVtaXQoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KFwiYnkgY29udGV4dFwiLCAoZG9uZTogTW9jaGFEb25lKSA9PiB7XG4gICAgICAgICAgICBsZXQgZXZlbnQgPSBuZXcgRXZlbnRQcm9wZXJ0eS5Wb2lkKCk7XG4gICAgICAgICAgICBsZXQgY29udGV4dCA9IHt9O1xuICAgICAgICAgICAgbGV0IGhhbmRsZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcyA9PT0gY29udGV4dClcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2hvdWxkIG5vdCBiZSBpbnZva2VkXCIpO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIE9mZiBieSBjb250ZXh0IHNob3VsZCByZW1vdmUgYWxsIGhhbmRsZXJzIHdpdGggdGhlXG4gICAgICAgICAgICAvLyBjb250ZXh0IGJ1dCBzaG91bGQgbm90IGFmZmVjdCB0aGUgaGFuZGxlcnMgcGFzc2VkIHdpdGhvdXQgY29udGV4dFxuXG4gICAgICAgICAgICBldmVudC5vbihoYW5kbGVyLCBjb250ZXh0KTtcbiAgICAgICAgICAgIGV2ZW50Lm9uKGhhbmRsZXIsIGNvbnRleHQpO1xuICAgICAgICAgICAgZXZlbnQub24oaGFuZGxlcik7XG4gICAgICAgICAgICBldmVudC5vZmYoY29udGV4dCk7XG5cbiAgICAgICAgICAgIGV2ZW50LmVtaXQoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KFwiY2xlYXJzXCIsIChkb25lOiBNb2NoYURvbmUpID0+IHtcbiAgICAgICAgICAgIGxldCBldmVudCA9IG5ldyBFdmVudFByb3BlcnR5LlZvaWQoKTtcbiAgICAgICAgICAgIGxldCBoYW5kbGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMgPT09IGNvbnRleHQpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNob3VsZCBub3QgYmUgaW52b2tlZFwiKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvLyBPZmYgYnkgY29udGV4dCBzaG91bGQgcmVtb3ZlIGFsbCBoYW5kbGVycyB3aXRoIHRoZVxuICAgICAgICAgICAgLy8gY29udGV4dCBidXQgc2hvdWxkIG5vdCBhZmZlY3QgdGhlIGhhbmRsZXJzIHBhc3NlZCB3aXRob3V0IGNvbnRleHRcbiAgICAgICAgICAgIGV2ZW50Lm9uKGhhbmRsZXIpO1xuICAgICAgICAgICAgZXZlbnQub24oaGFuZGxlcik7XG4gICAgICAgICAgICBldmVudC5vZmYoKTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZG9uZSwgMTApO1xuXG4gICAgICAgICAgICBldmVudC5lbWl0KCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoXCJvbmNlXCIsICgpID0+IHtcbiAgICAgICAgdGVzdFRyaWdnZXJzKFwib25jZVwiKTtcbiAgICAgICAgaXQoXCJ0cmlnZ2VycyBvbmNlXCIsICgpID0+IHtcbiAgICAgICAgICAgIGxldCBldmVudCA9IG5ldyBFdmVudFByb3BlcnR5LlZvaWQoKTtcbiAgICAgICAgICAgIGxldCBpc0ZpcnN0ID0gdHJ1ZTtcbiAgICAgICAgICAgIGV2ZW50Lm9uY2UoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGNoYWkuYXNzZXJ0KGlzRmlyc3QpO1xuICAgICAgICAgICAgICAgIGlzRmlyc3QgPSBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZXZlbnQuZW1pdCgpO1xuICAgICAgICAgICAgZXZlbnQuZW1pdCgpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBkZXNjcmliZShcIm1hdGNoXCIsICgpID0+IHtcbiAgICAgICAgdGVzdE1hdGNoVHJpZ2dlcnMoXCJtYXRjaFwiKTtcbiAgICAgICAgaXQoXCJtYXRjaGVzIG9iamVjdCBwYXJ0XCIsIChkb25lOiBNb2NoYURvbmUpID0+IHtcbiAgICAgICAgICAgIGxldCBldmVudCA9IG5ldyBFdmVudFByb3BlcnR5PGFueT4oKTtcbiAgICAgICAgICAgIGV2ZW50Lm1hdGNoKHsgYTogMSwgYjogMiB9LCBmdW5jdGlvbiAoKSB7IGRvbmUoKTsgfSk7XG4gICAgICAgICAgICBldmVudC5lbWl0KHsgYTogMSwgYjogMiwgYzogMywgZDogXCJ4XCJ9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KFwibWF0Y2hlcyBkZWVwZXJcIiwgKGRvbmU6IE1vY2hhRG9uZSkgPT4ge1xuICAgICAgICAgICAgbGV0IGV2ZW50ID0gbmV3IEV2ZW50UHJvcGVydHk8YW55PigpO1xuICAgICAgICAgICAgZXZlbnQubWF0Y2goeyBhOiB7eCA6IFwieVwifSwgYzogWzEsIDJdIH0sIGZ1bmN0aW9uICgpIHsgZG9uZSgpOyB9KTtcbiAgICAgICAgICAgIGV2ZW50LmVtaXQoeyBhOiB7eCA6IFwieVwiLCB6OiB7cjogMX19LCBjOiBbMSwgMiwgeyB4OiBcIj9cIn0sIG51bGxdIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoXCJtYXRjaGVzIHJlZ2V4cFwiLCAoZG9uZTogTW9jaGFEb25lKSA9PiB7XG4gICAgICAgICAgICBsZXQgZXZlbnQgPSBuZXcgRXZlbnRQcm9wZXJ0eTxhbnk+KCk7XG4gICAgICAgICAgICBldmVudC5tYXRjaCgvdGVzdFsxMjNdK3gvLCBmdW5jdGlvbiAoKSB7IGRvbmUoKTsgfSk7XG4gICAgICAgICAgICBldmVudC5lbWl0KFwidGVzdC10ZXN0MnhzXCIpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBkZXNjcmliZShcIm1hdGNoT25jZVwiLCAoKSA9PiB7XG4gICAgICAgIHRlc3RNYXRjaFRyaWdnZXJzKFwibWF0Y2hPbmNlXCIpO1xuICAgICAgICBpdChcIm1hdGNoZXMgb25jZVwiLCAoKSA9PiB7XG4gICAgICAgICAgICBsZXQgZXZlbnQgPSBuZXcgRXZlbnRQcm9wZXJ0eTxzdHJpbmc+KCk7XG4gICAgICAgICAgICBsZXQgaXNGaXJzdCA9IHRydWU7XG4gICAgICAgICAgICBldmVudC5tYXRjaE9uY2UoXCJtYXRjaFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgY2hhaS5hc3NlcnQoaXNGaXJzdCk7XG4gICAgICAgICAgICAgICAgaXNGaXJzdCA9IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBldmVudC5lbWl0KFwibWF0Y2hcIik7XG4gICAgICAgICAgICBldmVudC5lbWl0KFwibWF0Y2hcIik7XG4gICAgICAgICAgICBldmVudC5lbWl0KFwidW5tYXRjaFwiKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgZGVzY3JpYmUoXCJwaXBlXCIsICgpID0+IHtcbiAgICAgICAgaXQoXCJwYXNzZXMgYXJndW1lbnQsIGdldCBsaXN0ZW5lcklkXCIsIChkb25lOiBNb2NoYURvbmUpID0+IHtcbiAgICAgICAgICAgIGxldCBldmVudEZyb20gPSBuZXcgRXZlbnRQcm9wZXJ0eTxzdHJpbmc+KCk7XG4gICAgICAgICAgICBsZXQgZXZlbnRUbyA9IG5ldyBFdmVudFByb3BlcnR5PHN0cmluZz4oKTtcbiAgICAgICAgICAgIGxldCB0ZXN0QXJnID0gXCJ0ZXN0XCI7XG4gICAgICAgICAgICBldmVudFRvLm9uKGZ1bmN0aW9uIChhcmc6IHN0cmluZykge1xuICAgICAgICAgICAgICAgIGV4cGVjdChhcmcpLnRvLmVxdWFsKHRlc3RBcmcpO1xuICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbGV0IGlkID0gZXZlbnRGcm9tLnBpcGUoZXZlbnRUbyk7XG4gICAgICAgICAgICBleHBlY3QodHlwZW9mIGlkKS50by5lcXVhbChcIm51bWJlclwiKTtcbiAgICAgICAgICAgIGV2ZW50RnJvbS5lbWl0KHRlc3RBcmcpO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoXCJvZmZzIHdpdGggaWRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgbGV0IGV2ZW50RnJvbSA9IG5ldyBFdmVudFByb3BlcnR5LlZvaWQoKTtcbiAgICAgICAgICAgIGxldCBldmVudFRvID0gbmV3IEV2ZW50UHJvcGVydHkuVm9pZCgpO1xuXG4gICAgICAgICAgICBldmVudFRvLm9uKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IEVycm9yKFwiU2hvdWxkIG5vdCBoYXBwZW5cIik7IH0pO1xuICAgICAgICAgICAgbGV0IGlkID0gZXZlbnRGcm9tLnBpcGUoZXZlbnRUbyk7XG4gICAgICAgICAgICBldmVudEZyb20ub2ZmKGlkKTtcbiAgICAgICAgICAgIGV2ZW50RnJvbS5lbWl0KCk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdChcIm9mZnMgd2l0aCBldmVudFwiLCAoKSA9PiB7XG4gICAgICAgICAgICBsZXQgZXZlbnRGcm9tID0gbmV3IEV2ZW50UHJvcGVydHkuVm9pZCgpO1xuICAgICAgICAgICAgbGV0IGV2ZW50VG8gPSBuZXcgRXZlbnRQcm9wZXJ0eS5Wb2lkKCk7XG5cbiAgICAgICAgICAgIGV2ZW50VG8ub24oZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgRXJyb3IoXCJTaG91bGQgbm90IGhhcHBlblwiKTsgfSk7XG4gICAgICAgICAgICBldmVudEZyb20ucGlwZShldmVudFRvKTtcbiAgICAgICAgICAgIGV2ZW50RnJvbS5vZmYoZXZlbnRUbyk7XG4gICAgICAgICAgICBldmVudEZyb20uZW1pdCgpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBkZXNjcmliZShcInJvdXRlXCIsICgpID0+IHtcbiAgICAgICAgaXQoXCJzdHJpbmdcIiwgKCkgPT4ge1xuICAgICAgICAgICAgbGV0IGV2ZW50RnJvbSA9IG5ldyBFdmVudFByb3BlcnR5PHN0cmluZz4oKTtcbiAgICAgICAgICAgIGxldCBldmVudFRvID0gbmV3IEV2ZW50UHJvcGVydHk8c3RyaW5nPigpO1xuXG4gICAgICAgICAgICBldmVudFRvLm9uKGZ1bmN0aW9uIChhcmc6IHN0cmluZykge1xuICAgICAgICAgICAgICAgIGV4cGVjdChhcmcpLnRvLmVxdWFsKFwidGVzdFwiKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbGV0IGlkID0gZXZlbnRGcm9tLnJvdXRlKFwidGVzdFwiLCBldmVudFRvKTtcbiAgICAgICAgICAgIGV4cGVjdCh0eXBlb2YgaWQpLnRvLmVxdWFsKFwibnVtYmVyXCIpO1xuICAgICAgICAgICAgZXZlbnRGcm9tLmVtaXQoXCJ0ZXN0XCIpO1xuICAgICAgICAgICAgZXZlbnRGcm9tLmVtaXQoXCJyYW5kb21cIik7XG4gICAgICAgICAgICBldmVudEZyb20uZW1pdChcImFueVwiKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KFwicmVnZXhwXCIsICgpID0+IHtcbiAgICAgICAgICAgIGxldCBldmVudEZyb20gPSBuZXcgRXZlbnRQcm9wZXJ0eTxzdHJpbmc+KCk7XG4gICAgICAgICAgICBsZXQgZXZlbnRUbyA9IG5ldyBFdmVudFByb3BlcnR5PHN0cmluZz4oKTtcbiAgICAgICAgICAgIGxldCBwYXNzID0gMTtcblxuICAgICAgICAgICAgZXZlbnRUby5vbihmdW5jdGlvbiAoYXJnOiBzdHJpbmcpIHtcbiAgICAgICAgICAgICAgICBjaGFpLmFzc2VydCgvXlxcL1thLXpBLVpdKi8udGVzdChhcmcpKTtcbiAgICAgICAgICAgICAgICBjaGFpLmFzc2VydCghLS1wYXNzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbGV0IGlkID0gZXZlbnRGcm9tLnJvdXRlKC9eXFwvW2EtekEtWl0rLywgZXZlbnRUbyk7XG4gICAgICAgICAgICBleHBlY3QodHlwZW9mIGlkKS50by5lcXVhbChcIm51bWJlclwiKTtcbiAgICAgICAgICAgIGV2ZW50RnJvbS5lbWl0KFwiL3Jvb3RcIik7XG4gICAgICAgICAgICBldmVudEZyb20uZW1pdChcInJhbmRvbVwiKTtcbiAgICAgICAgICAgIGV2ZW50RnJvbS5lbWl0KFwiLzM0L1wiKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgZGVzY3JpYmUoXCJmaXJzdFwiLCAoKSA9PiB7XG4gICAgICAgIGl0KFwicmVzb2x2ZXMgd2l0aCB2YWx1ZVwiLCAoZG9uZTogTW9jaGFEb25lKSA9PiB7XG4gICAgICAgICAgICBsZXQgZXZlbnQgPSBuZXcgRXZlbnRQcm9wZXJ0eTxzdHJpbmc+KCk7XG4gICAgICAgICAgICBsZXQgdGVzdEFyZzogc3RyaW5nID0gXCJ0ZXN0XCI7XG4gICAgICAgICAgICBldmVudC5maXJzdC50aGVuKChhcmc6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgIGV4cGVjdChhcmcpLnRvLmVxdWFsKHRlc3RBcmcpO1xuICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZXZlbnQuZW1pdCh0ZXN0QXJnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJjYW4gYmUgY2F1Z2h0IGFmdGVyIGVtaXRcIiwgKGRvbmU6IE1vY2hhRG9uZSkgPT4ge1xuICAgICAgICAgICAgbGV0IGV2ZW50ID0gbmV3IEV2ZW50UHJvcGVydHkuVm9pZCgpO1xuICAgICAgICAgICAgZXZlbnQuZW1pdCgpO1xuICAgICAgICAgICAgZXZlbnQuZmlyc3QudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIGRlc2NyaWJlKFwibmV4dFwiLCAoKSA9PiB7XG4gICAgICAgIGl0KFwicmVzb2x2ZXMgd2l0aCB2YWx1ZVwiLCAoZG9uZTogTW9jaGFEb25lKSA9PiB7XG4gICAgICAgICAgICBsZXQgZXZlbnQgPSBuZXcgRXZlbnRQcm9wZXJ0eTxzdHJpbmc+KCk7XG4gICAgICAgICAgICBsZXQgdGVzdEFyZzogc3RyaW5nID0gXCJ0ZXN0XCI7XG4gICAgICAgICAgICBldmVudC5uZXh0KCkudGhlbigoYXJnOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICBleHBlY3QoYXJnKS50by5lcXVhbCh0ZXN0QXJnKTtcbiAgICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGV2ZW50LmVtaXQodGVzdEFyZyk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdChcImNyZWF0ZXMgbmV3IHByb21pc2VzXCIsIChkb25lOiBNb2NoYURvbmUpID0+IHtcbiAgICAgICAgICAgIGxldCBldmVudCA9IG5ldyBFdmVudFByb3BlcnR5PHN0cmluZz4oKTtcbiAgICAgICAgICAgIGxldCB0ZXN0QXJnMTogc3RyaW5nID0gXCJ0ZXN0MVwiO1xuICAgICAgICAgICAgbGV0IHRlc3RBcmcyOiBzdHJpbmcgPSBcInRlc3QyXCI7XG4gICAgICAgICAgICBldmVudC5uZXh0KCkudGhlbigoYXJnOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICBleHBlY3QoYXJnKS50by5lcXVhbCh0ZXN0QXJnMSk7XG4gICAgICAgICAgICAgICAgZXZlbnQubmV4dCgpLnRoZW4oKGFyZzogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGV4cGVjdChhcmcpLnRvLmVxdWFsKHRlc3RBcmcyKTtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQubmV4dCgpLnRoZW4oKGFyZzogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBleHBlY3QoYXJnKS50by5lcXVhbCh0ZXN0QXJnMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBldmVudC5lbWl0KHRlc3RBcmcxKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBldmVudC5lbWl0KHRlc3RBcmcyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZXZlbnQuZW1pdCh0ZXN0QXJnMSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIGl0KFwiRXZlbnRQcm9wZXJ0eS5tYWtlXCIsIChkb25lOiBNb2NoYURvbmUpID0+IHtcbiAgICAgICAgY2xhc3MgVGVzdCB7XG4gICAgICAgICAgICBwcml2YXRlIGV2ZW50OiBFdmVudFByb3BlcnR5PHN0cmluZz47XG4gICAgICAgICAgICBwdWJsaWMgZW1pdHRlcjogRXZlbnRQcm9wZXJ0eS5FbWl0dGVyPHN0cmluZz47XG4gICAgICAgICAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgICAgICAgICBbdGhpcy5ldmVudCwgdGhpcy5lbWl0dGVyXSA9IEV2ZW50UHJvcGVydHkubWFrZTxzdHJpbmc+KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ZXN0KCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZXZlbnQuZW1pdChcInRlc3RcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGluc3RhbmNlID0gbmV3IFRlc3QoKTtcbiAgICAgICAgaW5zdGFuY2UuZW1pdHRlci5vbigoKSA9PiBkb25lKCkpO1xuICAgICAgICBpbnN0YW5jZS50ZXN0KCk7XG4gICAgfSk7XG59KTsiXX0=