/// <reference path="../typings/index.d.ts"/>
const _ = require("lodash");
class Event {
    constructor() {
        this.listeners = [];
        this.isBeingTriggered = false;
        this.triggerDelegate = null;
        this.listenDelegate = null;
        this.matchDelegate = null;
        this.matchOnceDelegate = null;
        this.unlistenDelegate = null;
        this.onceDelegate = null;
        this.whenDelegate = null;
        this.thenDelegate = null;
        this.catchDelegate = null;
        this.promise = null;
        this.isFirstTriggerDone = false;
        this.idCounter = 0;
        this.triggerDelegate = (eventArg) => this.trigger(eventArg);
        this.listenDelegate = (...args) => {
            return this.listen.apply(this, args);
        };
        this.matchDelegate = (...args) => {
            return this.match.apply(this, args);
        };
        this.matchOnceDelegate = (...args) => {
            return this.matchOnce.apply(this, args);
        };
        this.unlistenDelegate = (...args) => {
            return this.unlisten.apply(this, args);
        };
        this.onceDelegate = (handler, context = null) => {
            return this.once(handler, context);
        };
        this.whenDelegate = () => {
            return this.when();
        };
        this.thenDelegate = (onOk, onFail) => {
            return this.then(onOk, onFail);
        };
        this.catchDelegate = (onFail) => {
            return this.catch(onFail);
        };
        this.promise = new Promise((resolve) => { this.resolve = resolve; });
    }
    mixin(target) {
        target.trigger = this.getTriggerer();
        target.getTriggerer = () => {
            return this.getTriggerer();
        };
        target.listen = this.getListener();
        target.match = this.getMatchListener();
        target.matchOnce = this.getMatchOncer();
        target.unlisten = this.getUnlistener();
        target.once = this.getOncer();
        target.when = this.getWhener();
        target.then = this.getThener();
        target.catch = this.getCatcher();
        return target;
    }
    /** Returns a context-independent callback that triggers the event with given argument */
    getTriggerer() { return this.triggerDelegate; }
    getListener() { return this.listenDelegate; }
    getMatchListener() { return this.matchDelegate; }
    getMatchOncer() { return this.matchOnceDelegate; }
    getUnlistener() { return this.unlistenDelegate; }
    getOncer() { return this.onceDelegate; }
    getWhener() { return this.whenDelegate; }
    getThener() { return this.thenDelegate; }
    getCatcher() { return this.catchDelegate; }
    /**
     * Triggers the event with given argument, invoking all of its handlers, and if
     * the event is triggered for the first time - removing the once event handlers and
     * saving given argument inetrnally as first trigger argument.
     */
    trigger(eventArg) {
        if (this.isBeingTriggered) {
            throw new Error(`Event triggered during trigger handling - suspecting recursive event.`);
        }
        this.isBeingTriggered = true;
        if (!this.isFirstTriggerDone) {
            this.isFirstTriggerDone = true;
            this.resolve(eventArg);
        }
        this.listeners.slice().forEach((listener) => {
            let doCall = true;
            if (listener.onlyMatching) {
                doCall = listener.matchValue === eventArg;
            }
            if (doCall) {
                if (listener.context) {
                    listener.handler.call(listener.context, eventArg);
                }
                else {
                    listener.handler.call(null, eventArg);
                }
                if (listener.once) {
                    this.removeListener(listener);
                }
            }
        });
        this.isBeingTriggered = false;
    }
    listen(...args) {
        let id;
        if (typeof args[0] === 'string') {
            let [name, handler, context] = args;
            id = this.addListener({ name, handler, context });
        }
        else {
            let [handler, context] = args;
            id = this.addListener({ handler, context });
        }
        return id;
    }
    ;
    match(value, ...args) {
        let id;
        if (typeof args[0] === 'string') {
            let [name, handler, context] = args;
            id = this.addListener({ name, handler, context, onlyMatching: true, matchValue: value });
        }
        else {
            let [handler, context] = args;
            id = this.addListener({ handler, context, onlyMatching: true, matchValue: value });
        }
        return id;
    }
    ;
    matchOnce(value, handler, context = null) {
        return this.addListener({ context, handler, once: true, onlyMatching: true, matchValue: value });
    }
    once(handler, context = null) {
        return this.addListener({ context, handler, once: true });
    }
    unlisten(...args) {
        let name = null, context, handler, idToRemove = null;
        switch (args.length) {
            case 0:
                this.listeners = [];
                return;
            case 1:
                if (typeof args[0] === 'string') {
                    name = args[0];
                    handler = args[1];
                    context = args[2];
                }
                else if (typeof args[0] === 'number') {
                    idToRemove = args[0];
                }
                else {
                    handler = args[0];
                    context = args[1];
                }
                ;
                break;
            case 2:
                handler = args[0];
                context = args[1];
                break;
        }
        this.listeners = _.filter(this.listeners, (hConf) => {
            let differentHandler = hConf.handler !== handler;
            let noContextGiven = context === null;
            let confHasNoContext = !!hConf.context;
            let differentContext = hConf.context !== context;
            let sameName = name && hConf.name && (name === hConf.name);
            let dontRemove;
            if (idToRemove !== null) {
                dontRemove = idToRemove !== hConf.id;
            }
            else {
                if (name) {
                    dontRemove = !sameName;
                }
                else {
                    if (differentHandler) {
                        dontRemove = true;
                    }
                    else {
                        dontRemove = noContextGiven ? (!confHasNoContext) : (confHasNoContext || differentContext);
                    }
                }
            }
            return dontRemove;
        });
    }
    on(nameOrHandler, handlerOrNothing) {
        return this.listen.apply(this, arguments);
    }
    off(bullshitWTF, context) {
        return this.unlisten.apply(this, arguments);
    }
    when() { return this.promise; }
    then(onOk, onFail) { return this.when().then(onOk, onFail); }
    after(onAny) { return this.then(onAny).catch(onAny); }
    catch(onFail) { return this.when().catch(onFail); }
    pipe(other) {
        this.on(other.getTriggerer());
    }
    unpipe(other) {
        this.off(other.getTriggerer());
    }
    removeListener(listener) {
        let listenerIndex = this.listeners.indexOf(listener);
        if (listenerIndex !== -1) {
            this.listeners.splice(listenerIndex, 1);
        }
    }
    addListener(options) {
        let { context, handler, once, onlyMatching, matchValue } = options;
        this.idCounter++;
        this.listeners.push({ context, handler, once, id: this.idCounter, onlyMatching, matchValue });
        return this.idCounter;
    }
    static event() {
        return function (prototype, eventName) {
            return {
                configurable: true,
                enumerable: false,
                get() {
                    let event = new Event();
                    Reflect.defineProperty(this, eventName, {
                        configurable: false,
                        enumerable: false,
                        writable: false,
                        value: event
                    });
                    return event;
                }
            };
        };
    }
    static emits(eventName) {
        return function (prototype, methodName, original) {
            let originalMethod = original.value;
            let descriptor = {
                configurable: false,
                enumerable: false,
                writeable: false,
                value(...args) {
                    let result = originalMethod.apply(this, args);
                    this[eventName].trigger(result);
                    return result;
                }
            };
            return descriptor;
        };
    }
}
exports.Event = Event;
function emits(name) {
    return Event.emits(name);
}
exports.emits = emits;
function event(name) {
    return Event.emits(name);
}
exports.event = event;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Event;
//# sourceMappingURL=data:application/json;base64,